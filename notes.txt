{
    children,
    className,
}: {
    children: React.ReactNode;
    className?: string;
}



The "use client"; directive at the top of a React component file is used to explicitly mark that file and its components as Client Components

Appwrite is an open-source backend-as-a-service (BaaS) platform designed to simplify backend development for web, mobile, and Flutter applications by providing developers with a suite of ready-to-use APIs
add

Zustand is a small, fast, and scalable state management 
library for React applications. It provides a simple API 
based on hooks and does not require boilerplate or provider
 components like some other state libraries. 

Immer middleware helps keep the react state persistent 
and allows you to use the same state across multiple 
components without worrying about the state being 
overwritten or lost. 

(ur always mutating the new state and not the existing state)


onRehydrateStorage ->  listener function provided in the persist 
middleware configuration that gets called when the
 state is rehydrated 

brings the state from local storage
to our application (this is what hydration means in zustand 
lingo)

import 
interface definitions

||zustand store immer persist||

store state and methods
rehydration

Zustand optimizes fine-grained re-rendering so components
 only re-render when the specific parts of the store 
 they use change. useEffect with useState can lead to
  more frequent or unnecessary re-renders if not carefully
   optimized.


 create<IAuthStore>(): Initializes a Zustand store with TypeScript interface IAuthStore for type safety.

The store state includes:

session, jwt, user: to store the current user session, JSON Web Token, and user data.

hydrated: boolean flag to indicate if persisted state has been restored from storage.

State-modifying functions:

setHydrated(): Sets the hydrated flag true after the state is rehydrated from persistence.

verifySession(): Asynchronously checks if a user session exists by calling account.getSession("current"), then updates the state.

login(email, password): Attempts login by creating an email/password session, fetching user info and JWT in parallel, and sets state. Also ensures user reputation 
is initialized if missing.

createAccount(name, email, password): Creates a new user account and returns success or failure info.

logout(): Deletes all sessions and clears auth state.

Error handling logs errors and returns structured failure results with Appwrite exception info if applicable.

The store state is persisted with key 'auth', and a hook onRehydrateStorage marks the store as hydrated once state is restored from persisted storage.

src -> models -> client -> config.ts:  

react markdown editor

//

look up things on shadcn and magic ui to grab the open source
stuff 

ui.aceternity.com and magicui for open source additions
after installing via CLI it will automatically be installed in src->components -> UI or magicui folder
from which we can export to our stuff


<>

these things are typescript specific 


name.ts


server-> config.ts


question.collection.ts ->


//indexes if it doesnt work do it via web only
//watch the video still

answer.collection.ts ->
comment collection.ts


//storage.collection.ts



//vote.collection.ts :


//dbSetup.ts

---DATA MODELLING END ---


- ZUSTAND -

 















